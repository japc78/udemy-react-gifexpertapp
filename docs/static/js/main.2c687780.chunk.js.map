{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEfC,mBAAS,IAFM,mBAE5CC,EAF4C,KAEhCC,EAFgC,KAoBnD,OACC,0BAAMC,SAZc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,OAQd,4CACA,2BACCO,KAAK,OACLC,MAAST,EACTU,SAtBuB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,Y,uBCNZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACiCC,UAAUH,GAD3C,+DAEEI,MAAOF,GAFT,cAEhBG,EAFgB,gBAGCA,EAAUC,OAHX,uBAGdC,EAHc,EAGdA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVd,kBAgBfM,GAhBe,4CAAH,sDCKPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGxC,OACC,yBAAKc,UAAU,0CACd,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCRMO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,MAEjBd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAJiC,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAmB3C,OAZAC,qBAAW,WACVxB,EAASC,GACPwB,MAAK,SAAAC,GAELH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAIV,CAACpB,IAEGqB,EDdyBK,CAAc1B,GAAjCa,EAH2B,EAGhCN,KAAaa,EAHmB,EAGnBA,QAErB,OACC,oCACC,wBAAIJ,UAAU,qCAAsChB,GAKlDoB,GAAW,uBAAGJ,UAAU,oCAAb,eAGb,yBAAKA,UAAU,aAObH,EAAOJ,KAAK,SAAAC,GAAG,OACd,kBAAC,EAAD,eACCiB,IAAOjB,EAAIC,IAIPD,UE7BEkB,EAAe,WAAM,MAGG1C,mBAAS,CAAC,iBAHb,mBAG1B2C,EAH0B,KAGd5C,EAHc,KAKjC,OACC,oCACC,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEE4C,EAAWpB,KAAI,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACC2B,IAAO3B,EACPA,SAAYA,U,MCdnB8B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.2c687780.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t\t// console.log(e.target);\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories(c => [inputValue, ...c]);\r\n\t\t\tsetInputValue('');\r\n\t\t\t// console.log('Submit hecho!');\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit= {handleSubmit}>\r\n\t\t\t<h2>Add Category</h2>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue = {inputValue}\r\n\t\t\t\tonChange = {handleInputChange}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=LtkGU0ZbRcWCOsCJNT1RceZ9iE6w2Pw6`\r\n\tconst respuesta = await fetch( url );\r\n\tconst { data } = await respuesta.json();\r\n\r\n\tconst gifs = data.map (img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\t//la ? indica que si existe la url la traiga sino que no la pinte.\r\n\t\t\turl: img.images?.downsized_medium.url\r\n\t\t}\r\n\t})\r\n\r\n\t// console.log(data);\r\n\t// console.log(gifs);\r\n\treturn gifs;\r\n}","import React from 'react'\r\n\r\n// Con props ya pasadas de manera independiente.\r\n// export const GifGridItem = ( props ) => {\r\n// \tconsole.log(props);\r\n\r\n// De una manera mas amigable para la lectura del codigo\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\t// console.log({id, title, url});\r\n\r\n\treturn (\r\n\t\t<div className='card animate__animated animate__fadeIn'>\r\n\t\t\t<img src={url} alt={title}/>\r\n\t\t\t<p>{title}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category }) => {\r\n\r\n\t// Con desestructuracion\r\n\tconst { data:images, loading} = useFetchGifs( category );\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n\t\t\t{/* Operador ternario, si loading true se muestra cargando*/}\r\n\t\t\t{/* { loading ? 'Cargando...' : 'Datos cargados'} */}\r\n\r\n\t\t\t{ loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{\r\n\t\t\t\t\t// images.map(img => (\r\n\t\t\t\t\t// \t<li key = {img.id}> {img.title} </li>\r\n\t\t\t\t\t// ))\r\n\r\n\t\t\t\t\t// Con destructuracion\r\n\t\t\t\t\timages.map( img => (\r\n\t\t\t\t\t\t<GifGridItem\r\n\t\t\t\t\t\t\tkey = {img.id}\r\n\t\t\t\t\t\t\t// img = {img}\r\n\r\n\t\t\t\t\t\t\t// Se envian las props diretamente con desestructuracion de manera independiente\r\n\t\t\t\t\t\t\t{...img}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t</div>\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\t// console.log(category);\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t});\r\n\r\n\tuseEffect( () => {\r\n\t\tgetGifs( category )\r\n\t\t\t.then(imgs => {\r\n\t\t\t\t// console.log(imgs);\r\n\t\t\t\tsetState({\r\n\t\t\t\t\tdata: imgs,\r\n\t\t\t\t\tloading: false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t}, [category]);\r\n\r\n\treturn state; // {data:[], loading>true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\t// Uso del Hook useState para modificar dinamicamente la lista\r\n\tconst [categories, setCategories] = useState(['Regular Show']);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories = { setCategories }/>\r\n\t\t\t<hr/>\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map(category => (\r\n\t\t\t\t\t\t<GifGrid\r\n\t\t\t\t\t\t\tkey = {category}\r\n\t\t\t\t\t\t\tcategory = {category}/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n//Tarea\n// Crear componente GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr/>"],"sourceRoot":""}